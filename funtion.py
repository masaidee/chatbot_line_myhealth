from flask import Flask, request, jsonify, render_template, redirect
import json
import requests
import numpy as np
from pymongo import MongoClient
import pickle
import os
import requests
import matplotlib.pyplot as plt
from scipy.stats import linregress
from matplotlib import font_manager as fm
from datetime import datetime
from fuzzywuzzy import process, fuzz




    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ‡∏™‡∏°‡∏≠‡∏á
with open(r"D:\masaidee\Internship\project\chatbot_line_myhealth\model_stroke_risk.pkl", 'rb') as model_file:
    Staggers_classifier = pickle.load(model_file)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
with open(r"D:\masaidee\Internship\project\chatbot_line_myhealth\model_blood_fat.pkl", 'rb') as model_file:
    Blood_fat_classifier = pickle.load(model_file)

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î
with open(r"D:\masaidee\Internship\project\chatbot_line_myhealth\model_dm_risk.pkl", 'rb') as model_file:
    Diabetes_classifier = pickle.load(model_file)

# ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB 
MONGO_URI = "mongodb://localhost:27017/"
mongo_client = MongoClient(MONGO_URI)
db = mongo_client["health"]  # ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ
Staggers_collection = db["Staggers"]            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏™‡∏°‡∏≠‡∏á
Diabetes_collection = db["Diabetes"]            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
blood_fat_collection = db["blood-fat"]          # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î
Disease_collection = db["Disease-status"]       # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ
user_profiles = db['user_profiles']             # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ


LINE_API_URL = "https://api.line.me/v2/bot/message/push"
#myhealth
# LINE_ACCESS_TOKEN = "1x3tE+qWFFWfG2wxF3B8iemgo4N9PSNxQ9pkXc66w+cq00iPoCgxq1XdHOVZHl+sgeWzO5TtQvYp8z/LgvUlwHrVWBCC9zp+FJrJGHeT9NoMJ9OQvpGDXAsYOuEYMRA/53Q0qkOCkRuiMa4VTENihAdB04t89/1O/w1cDnyilFU="
#sipsinse
LINE_ACCESS_TOKEN = "NeXMAZt6QoDOwz7ryhruPZ0xrkfHbWPhQVvA9mLII8Y0CAeOTB7zXUGhzs8Q6JhT8ntAKAilCJQKjE/6rTfonbVRFTLkg7WL8rtzfHisWYBLbOCc6jkx6iePMA1VNJuqN/0B05f3+jq8d2nOeFnGQgdB04t89/1O/w1cDnyilFU="
#myhealth2
# LINE_ACCESS_TOKEN = "+mxXTWUhft/lds9sjCQLThOE7hSpYYa3Qc9Ex8f+/7NNB6075OpjZ0jIC/83ABlncS0BObm5K+8oDnHck6sKcILblYZv9AUU8TllWdaHWHWIE8Cp9Z1ybS0jfzi5iF6hDwggWQurGYX93oAOwwr9CQdB04t89/1O/w1cDnyilFU="
# LINE_ACCESS_TOKEN = "dlmMJIDuAnFTOrIxt1IjvGRihrCyyINAXB2QaTDGEUaikjefh2dZ7CFOk3hpBGSXNqCClqCGkeMULxN3tfC4DAYl/5c15dL1rTEhZ9AwyF7XSx2A7Cs4/pJhlQQWISwT2bWsyzxc9lxK8vDbAj8YnAdB04t89/1O/w1cDnyilFU="

ngrok = "https://a69c-223-205-176-129.ngrok-free.app"

#‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
def calculate_average(data_list):
    averages = {}
    count = len(data_list)

    for data in data_list:
        for key, value in data.items():
            if isinstance(value, (int, float)):  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                if key not in averages:
                    averages[key] = 0
                averages[key] += value

    for key in averages:
        averages[key] /= count

    return averages

def translate_keys(data, key_mapping):
    translated_data = {}
    for key, value in data.items():
        translated_key = key_mapping.get(key, key)
        translated_data[translated_key] = value
    return translated_data

def send_line_message(user, text):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE """
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    message = {
        "to": user,
        "messages": [{
            "type": "text",
            "text": text
        }]
    }
    requests.post(LINE_API_URL, headers=headers, data=json.dumps(message))

#‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
def compare_and_visualize_diabetes_data():
    req = request.get_json(silent=True, force=True)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ req ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏°‡∏µ userId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        user = req['originalDetectIntentRequest']['payload']['data']['source']['userId']
    except (KeyError, TypeError):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å request ‡πÑ‡∏î‡πâ")
        return None, None, None, None

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏ï‡∏≤‡∏° user_id
    latest_data = Diabetes_collection.find_one({"userId": user}, sort=[("timestamp", -1)])

    if not latest_data:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user: {user}")
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        return None, None, None, None

    previous_data = list(Diabetes_collection.find(
        {"userId": user, "timestamp": {"$lt": latest_data['timestamp']}},
        sort=[("timestamp", -1)]
    ))

    print(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_data}")
    print(f"üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {previous_data}")

    if not previous_data:
        print(f"‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user: {user}")
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        return None, None, None, None


    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    previous_avg = calculate_average(previous_data)
    latest_avg = {key: value for key, value in latest_data.items() if isinstance(value, (int, float))}

    # ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ñ‡∏µ‡∏¢‡πå
    key_mapping = {
        "age": "‡∏≠‡∏≤‡∏¢‡∏∏",
        "bmi": "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢",
        "visceral": "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡πâ‡∏≠‡∏á",
        "wc": "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß",
        "ht": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á",
        "sbp": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡∏ô",
        "dbp": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á",
        "fbs": "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î",
        "HbAlc": "‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô A1c",
        "family_his": "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß"
    }

    # ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    latest_avg = translate_keys(latest_avg, key_mapping)
    previous_avg = translate_keys(previous_avg, key_mapping)

    # ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    font_path = r"D:\masaidee\Internship\from\THSarabun\THSarabun.ttf"

    # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    prop = fm.FontProperties(fname=font_path)
    prop.set_size(20)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    labels = [key for key in latest_avg.keys() if key != "‡∏≠‡∏≤‡∏¢‡∏∏"]
    latest_values = [latest_avg[key] for key in labels]
    previous_values = [previous_avg[key] for key in labels]

    plt.figure(figsize=(8, 6))
    plt.bar(range(len(labels)), latest_values, width=0.4, label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", color="blue")
    plt.bar([i + 0.4 for i in range(len(labels))], previous_values, width=0.4, label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", color="orange")
    plt.xticks([i + 0.2 for i in range(len(labels))], labels, fontproperties=prop, rotation=45, ha='right', fontsize=20)
    plt.ylabel("‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", color="red", fontsize=30, fontproperties=prop)
    plt.xlabel("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", color="blue", fontsize=30, fontproperties=prop)
    plt.title("‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", fontproperties=prop, fontsize=30, color="red")
    plt.legend(prop=prop)
    plt.tight_layout()

    now = datetime.now()
    formatted_time = now.strftime("%Y-%m-%d.%H-%M-%S")
    user_dir = os.path.join(f"static/{user}")
    os.makedirs(user_dir, exist_ok=True)  # Ensure the directory exists
    graph_path = os.path.join(f"{user_dir}/{formatted_time}.png")
    plt.savefig(graph_path)
    plt.close()

    print(formatted_time)
    image_url = f"{ngrok}/{graph_path}"

    return user, latest_avg, previous_avg, image_url

#‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î
def compare_and_visualize_blood_fat_data():
    req = request.get_json(silent=True, force=True)
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ req ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏°‡∏µ userId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        user = req['originalDetectIntentRequest']['payload']['data']['source']['userId']
    except (KeyError, TypeError):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å request ‡πÑ‡∏î‡πâ")
        return None, None, None, None

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏ï‡∏≤‡∏° user_id
    latest_data = blood_fat_collection.find_one({"userId": user}, sort=[("timestamp", -1)])

    if not latest_data:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user: {user}")
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        return None, None, None, None

    previous_data = list(blood_fat_collection.find(
        {"userId": user, "timestamp": {"$lt": latest_data['timestamp']}},
        sort=[("timestamp", -1)]
    ))

    print(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_data}")
    print(f"üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {previous_data}")

    if not previous_data:
        print(f"‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user: {user}")
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        return None, None, None, None

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    previous_avg = calculate_average(previous_data)
    latest_avg = {key: value for key, value in latest_data.items() if isinstance(value, (int, float))}

    # ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ñ‡∏µ‡∏¢‡πå
    key_mapping = {
        "Gender": "‡πÄ‡∏û‡∏®",
        "Weight": "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "Height": "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
        "Cholesterol": "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•",
        "Triglycerider": "‡πÑ‡∏ï‡∏£‡∏Å‡∏•‡∏µ‡πÄ‡∏ã‡∏≠‡πÑ‡∏£‡∏î‡πå",
        "Hdl": "‡πÄ‡∏≠‡∏ä‡∏î‡∏µ‡πÅ‡∏≠‡∏•",
        "Ldl": "‡πÅ‡∏≠‡∏•‡∏î‡∏µ‡πÅ‡∏≠‡∏•"
    }

    # ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    latest_avg = translate_keys(latest_avg, key_mapping)
    previous_avg = translate_keys(previous_avg, key_mapping)

    # ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    font_path = r"D:\masaidee\Internship\from\THSarabun\THSarabun.ttf"  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

    # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    prop = fm.FontProperties(fname=font_path)
    prop.set_size(20)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    labels = [key for key in latest_avg.keys() if key != "‡∏≠‡∏≤‡∏¢‡∏∏"]
    latest_values = [latest_avg[key] for key in labels]
    previous_values = [previous_avg[key] for key in labels]

    plt.figure(figsize=(8, 6))
    plt.bar(range(len(labels)), latest_values, width=0.4, label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", color="blue")
    plt.bar([i + 0.4 for i in range(len(labels))], previous_values, width=0.4, label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", color="orange")
    plt.xticks([i + 0.2 for i in range(len(labels))], labels, fontproperties=prop, rotation=45, ha='right', fontsize=20)
    plt.ylabel("‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", color="red", fontsize=30, fontproperties=prop)
    plt.xlabel("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", color="blue", fontsize=30, fontproperties=prop)
    plt.title("‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", fontproperties=prop, fontsize=30, color="red")
    plt.legend(prop=prop)
    plt.tight_layout()
    now = datetime.now()
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    formatted_time = now.strftime("%Y-%m-%d.%H-%M-%S")
    user_dir = os.path.join(f"static/{user}")
    os.makedirs(user_dir, exist_ok=True)  # Ensure the directory exists
    graph_path = os.path.join(f"{user_dir}/{formatted_time}.png")
    plt.savefig(graph_path)
    plt.close()

    image_url = f"{ngrok}/{graph_path}"

    return user, latest_avg, previous_avg, image_url

#‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏£‡∏Ñ‡∏™‡∏°‡∏≠‡∏á
def compare_and_visualize_staggers_data():
    req = request.get_json(silent=True, force=True)
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ req ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏°‡∏µ userId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        user = req['originalDetectIntentRequest']['payload']['data']['source']['userId']
    except (KeyError, TypeError):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å request ‡πÑ‡∏î‡πâ")
        return None, None, None, None

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏ï‡∏≤‡∏° user_id
    latest_data = Staggers_collection.find_one({"userId": user}, sort=[("timestamp", -1)])

    if not latest_data:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user: {user}")
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        return None, None, None, None

    previous_data = list(Staggers_collection.find(
        {"userId": user, "timestamp": {"$lt": latest_data['timestamp']}},
        sort=[("timestamp", -1)]
    ))

    print(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_data}")
    print(f"üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {previous_data}")

    if not previous_data:
        print(f"‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user: {user}")
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        return None, None, None, None

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    previous_avg = calculate_average(previous_data)
    latest_avg = {key: value for key, value in latest_data.items() if isinstance(value, (int, float))}

    # ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ñ‡∏µ‡∏¢‡πå
    key_mapping = {
        "sbp": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡∏ô",
        "dbp": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á",
        "his": "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤",
        "smoke": "‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà",
        "fbs": "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î",
        "HbAlc": "‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô A1c",
        "total_Cholesterol": "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•‡∏£‡∏ß‡∏°",
        "Exe": "‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢",
        "bmi": "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢",
        "family_his": "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß"
    }

    # ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    latest_avg = translate_keys(latest_avg, key_mapping)
    previous_avg = translate_keys(previous_avg, key_mapping)

    # ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    font_path = r"D:\masaidee\Internship\from\THSarabun\THSarabun.ttf"  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

    # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    prop = fm.FontProperties(fname=font_path)
    prop.set_size(20)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    labels = [key for key in latest_avg.keys()]
    latest_values = [latest_avg[key] for key in labels]
    previous_values = [previous_avg[key] for key in labels]

    plt.figure(figsize=(8, 6))
    plt.bar(range(len(labels)), latest_values, width=0.4, label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", color="blue")
    plt.bar([i + 0.4 for i in range(len(labels))], previous_values, width=0.4, label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", color="orange")
    plt.xticks([i + 0.2 for i in range(len(labels))], labels, fontproperties=prop, rotation=45, ha='right', fontsize=20)
    plt.ylabel("‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", color="red", fontsize=30, fontproperties=prop)
    plt.xlabel("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", color="blue", fontsize=30, fontproperties=prop)
    plt.title("‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", fontproperties=prop, fontsize=30, color="red")
    plt.legend(prop=prop)
    plt.tight_layout()
    now = datetime.now()
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    formatted_time = now.strftime("%Y-%m-%d.%H-%M-%S")
    user_dir = os.path.join(f"static/{user}")
    os.makedirs(user_dir, exist_ok=True)  # Ensure the directory exists
    graph_path = os.path.join(f"{user_dir}/{formatted_time}.png")
    plt.savefig(graph_path)
    plt.close()

    image_url = f"{ngrok}/{graph_path}"

    return user, latest_avg, previous_avg, image_url



#‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î
def Checkup_blood_fat():
    req = request.get_json(silent=True, force=True)
    intent = req['queryResult']['intent']['displayName']
    # user_id = req['queryResult']['parameters'].get('user_id')
    user = req['originalDetectIntentRequest']['payload']['data']['source']['userId']
    print("Intent:", intent)
    # print("User ID:", user_id)
    print("User:", user)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏ï‡∏≤‡∏° user_id
    user_data_blood_fat = blood_fat_collection.find_one({"userId": user},sort=[("timestamp", -1)]) # timestamp 1=‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å, timestamp -1=‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
    print("User data:", user_data_blood_fat)
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not user_data_blood_fat:
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
        return None, None, None, None, None, None, None, None, None

    Gender = user_data_blood_fat.get("gender_str", 0)
    Weight = user_data_blood_fat.get("Weight", 0)
    Height = user_data_blood_fat.get("Height", 0)
    Cholesterol = user_data_blood_fat.get("Cholesterol", 0)
    Triglycerides = user_data_blood_fat.get("Triglycerides", 0)
    Hdl = user_data_blood_fat.get("Hdl", 0)
    Ldl = user_data_blood_fat.get("Ldl", 0)

    input_data = [[Gender, Weight, Height, Cholesterol, Triglycerides, Hdl, Ldl]]
    # print("Input data:", input_data)

    prediction = Blood_fat_classifier.predict(input_data)

    if prediction[0] == 0:
        reply_text = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"
    else:
        reply_text = "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"
        
    #‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 
    if Gender == 0:
        Gender_status = "‡∏ä‡∏≤‡∏¢"
    else:
        Gender_status = "‡∏´‡∏ç‡∏¥‡∏á"

    # send_blood_fat(user, reply_text, Gender_status, Weight, Height, Cholesterol, Triglycerides, Hdl, Ldl)
    return user, reply_text, Gender_status, Weight, Height, Cholesterol, Triglycerides, Hdl, Ldl

#‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
def Checkup_diabetes():
    req = request.get_json(silent=True, force=True)
    intent = req['queryResult']['intent']['displayName']
    user = req['originalDetectIntentRequest']['payload']['data']['source']['userId']
    print("Intent:", intent)
    print("User:", user)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏ï‡∏≤‡∏° user_id
    user_data_diabetes = Diabetes_collection.find_one({"userId": user}, sort=[("timestamp", -1)])
    print("User data:", user_data_diabetes)
    
    if not user_data_diabetes:
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
        return None, None, None, None, None, None, None, None, None, None, None, None, None, None

    age = user_data_diabetes.get("age", 0)
    bmi = user_data_diabetes.get("bmi", 0)
    visceral = user_data_diabetes.get("visceral", 0)
    wc = user_data_diabetes.get("wc", 0)
    ht = user_data_diabetes.get("ht", 0)
    sbp = user_data_diabetes.get("sbp", 0)
    dbp = user_data_diabetes.get("dbp", 0)
    fbs = user_data_diabetes.get("fbs", 0)
    HbAlc = user_data_diabetes.get("HbAlc", 0)
    family_his = user_data_diabetes.get("family_his", 0)

    

    input_data = [[age, bmi, visceral, wc, ht, sbp, dbp, fbs, HbAlc, family_his]]
    print("Input data:", input_data)

    prediction = Diabetes_classifier.predict(input_data)

    if prediction[0] == 0:
        reply_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥"
    elif prediction[0] == 1:
        reply_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
    else:
        reply_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á"


            
    if ht == 1:
        ht_str = "‡∏°‡∏µ"
    else:
        ht_str = "‡πÑ‡∏°‡πà‡∏°‡∏µ"

    if family_his == 1:
        family_his_str = "‡∏°‡∏µ"
    else:
        family_his_str = "‡πÑ‡∏°‡πà‡∏°‡∏µ"

    return user, reply_text, age, bmi, visceral, wc, ht, ht_str, sbp, dbp, fbs, HbAlc, family_his, family_his_str

#‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏£‡∏Ñ‡∏™‡∏°‡∏≠‡∏á
def Checkup_Staggers():
    req = request.get_json(silent=True, force=True)
    intent = req['queryResult']['intent']['displayName']
    user = req['originalDetectIntentRequest']['payload']['data']['source']['userId']
    print("Intent:", intent)
    print("User:", user)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏ï‡∏≤‡∏° user_id
    user_data_staggers = Staggers_collection.find_one({"userId": user}, sort=[("timestamp", -1)])
    print("User data:", user_data_staggers)
    
    if not user_data_staggers:
        send_line_message(user, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏™‡∏°‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏™‡∏°‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
        return None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None

    sbp = user_data_staggers.get("sbp", 0)
    dbp = user_data_staggers.get("dbp", 0)
    his = user_data_staggers.get("his", 0)
    smoke = user_data_staggers.get("smoke", 0)
    fbs = user_data_staggers.get("fbs", 0)
    HbAlc = user_data_staggers.get("HbAlc", 0)
    total_Cholesterol = user_data_staggers.get("total_Cholesterol", 0)
    Exe = user_data_staggers.get("Exe", 0)
    bmi = user_data_staggers.get("bmi", 0)
    family_his = user_data_staggers.get("family_his", 0)

    

    input_data = [[sbp, dbp, his, smoke, fbs, HbAlc, total_Cholesterol, Exe, bmi, family_his]]
    print("Input data:", input_data)

    prediction = Staggers_classifier.predict(input_data)

    if prediction[0] == 0:
        reply_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥"
    elif prediction[0] == 1:
        reply_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
    else:
        reply_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á"


            
    if his == 1:
        his_str = "‡∏°‡∏µ"
    else:
        his_str = "‡πÑ‡∏°‡πà‡∏°‡∏µ"

    if smoke == 0:
        smoke_str = "‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢"
    elif smoke == 1:
        smoke_str = "‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏π‡∏ö"
    else:
        smoke_str = "‡∏™‡∏π‡∏ö‡∏≠‡∏¢‡∏π‡πà"

    if Exe == 0:
        Exe_str = "0"
    elif Exe == 1:
        Exe_str = "150-200"
    else:
        Exe_str = "> 200"

    if family_his == 1:
        family_his_str = "‡∏°‡∏µ"
    else:
        family_his_str = "‡πÑ‡∏°‡πà‡∏°‡∏µ"

    return user, reply_text, sbp, dbp, his, his_str, smoke, smoke_str, fbs, HbAlc, total_Cholesterol, Exe, Exe_str, bmi, family_his, family_his_str


life = "https://liff.line.me/2003057525-1L9EGXEO"
#‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def insertData():
    req = request.get_json(silent=True, force=True)
    user = req['originalDetectIntentRequest']['payload']['data']['source']['userId']
    URL_add_user_form = f"{life}/getUser"
    URL_add_diabetes_form = f"{life}/diabetes"
    URL_add_blood_fat_form = f"{life}/blood_fat"
    URL_add_staggers_form = f"{life}/staggers"
    return user, URL_add_user_form, URL_add_diabetes_form, URL_add_blood_fat_form, URL_add_staggers_form

#‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
def getUser():
    req = request.get_json(silent=True, force=True)
    user = req['originalDetectIntentRequest']['payload']['data']['source']['userId']
    user_data = user_profiles.find_one({"userId": user})
    print("User data:", user_data)
    if not user_data:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
    user_data['_id'] = str(user_data['_id'])
    name = user_data.get("name", "")
    age = user_data.get("age", "")
    a = f"‡∏ä‡∏∑‡πà‡∏≠: {name} ‡∏≠‡∏≤‡∏¢‡∏∏: {age}"
    return a






# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
try:

    with open(r"D:\masaidee\Internship\project\chatbot_line_myhealth\questions__answers.pkl", "rb") as f:
        data = pickle.load(f)
        questions = data["questions"]
        answers = data["answers"]
except FileNotFoundError as e:
    print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    exit()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
def find_best_match_with_fuzzy(question, threshold=50):
    best_match = process.extractOne(question, questions, scorer=fuzz.partial_ratio)

    if best_match is None or best_match[1] < threshold:
        return "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

    best_answer = answers[questions.index(best_match[0])]

    # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤
    now = datetime.now()
    today_date = now.strftime("%d/%m/%Y")
    today_name = now.strftime("%A")
    current_time = now.strftime("%H:%M:%S")

    days_th = {
        "Monday": "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
        "Tuesday": "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
        "Wednesday": "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò",
        "Thursday": "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
        "Friday": "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå",
        "Saturday": "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå",
        "Sunday": "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"
    }

    # ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    best_answer = best_answer.replace("{date}", today_date)
    best_answer = best_answer.replace("{day}", days_th.get(today_name, today_name))
    best_answer = best_answer.replace("{time}", current_time)

    return best_answer
